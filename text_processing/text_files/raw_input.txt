This was the situation in 1965, when E. W. Dijkstra (1965) suggested using an integer variable to count the number of wakeups saved for future use.
In his proposal, a new variable type, a semaphore, was introduced.
A semaphore could have the value 0, indicating that no wakeups were saved, or some positive value if one or more wakeups were pending.
Dijkstra proposed having two operations on semaphores, now usually called down and up.
The down operation on a semaphore checks to see if the value is greater than 0.
If so, it decrements the value and just continues.
If the value is 0, the process is put to sleep without completing the down for the moment.
Checking the value, changing it, and possibly going to sleep, are all done as a single, indivisible atomic action.
It is guaranteed that once a semaphore operation has started, no other process can access the semaphore until the operation has completed or blocked.
This atomicity is absolutely essential to solving synchronization problems and avoiding race conditions.
Atomic actions, in which a group of related operations are either all performed without interruption or not performed at all, are extremely important in many other areas of computer science as well.
The up operation increments the value of the semaphore addressed.
If one or more processes were sleeping on that semaphore, unable to complete an earlier down operation, one of them is chosen by the system and is allowed to complete its down.
Thus, after an up on a semaphore with processes sleeping on it, the semaphore will still be 0, but there will be one fewer process sleeping on it.
The operation of incrementing the semaphore and waking up one process is also indivisible.
No process ever blocks doing an up, just as no process ever blocks doing a wakeup in the earlier model.
As an aside, in Dijkstraâ€™s original paper, he used the names P and V instead of down and up, respectively.
Since these have no mnemonic significance to people who do not speak Dutch and only marginal significance to those who do.
These were first introduced in the Algol 68 programming language.